// Code generated by mockery v1.0.0. DO NOT EDIT.

package adaptersmocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/magneticio/vamp-cloud-cli/cmd/models"

// VampCloudIngressesClient is an autogenerated mock type for the VampCloudIngressesClient type
type VampCloudIngressesClient struct {
	mock.Mock
}

// GetIngressByApplicationIDAndDomainName provides a mock function with given fields: applicationId, domainName
func (_m *VampCloudIngressesClient) GetIngressByApplicationIDAndDomainName(applicationId int64, domainName string) (*models.Ingress, error) {
	ret := _m.Called(applicationId, domainName)

	var r0 *models.Ingress
	if rf, ok := ret.Get(0).(func(int64, string) *models.Ingress); ok {
		r0 = rf(applicationId, domainName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ingress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(applicationId, domainName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngresses provides a mock function with given fields: applicationId
func (_m *VampCloudIngressesClient) ListIngresses(applicationId int64) ([]models.Ingress, error) {
	ret := _m.Called(applicationId)

	var r0 []models.Ingress
	if rf, ok := ret.Get(0).(func(int64) []models.Ingress); ok {
		r0 = rf(applicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Ingress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchIngress provides a mock function with given fields: ingress
func (_m *VampCloudIngressesClient) PatchIngress(ingress models.Ingress) error {
	ret := _m.Called(ingress)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Ingress) error); ok {
		r0 = rf(ingress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostIngress provides a mock function with given fields: ingress
func (_m *VampCloudIngressesClient) PostIngress(ingress models.Ingress) (int64, error) {
	ret := _m.Called(ingress)

	var r0 int64
	if rf, ok := ret.Get(0).(func(models.Ingress) int64); ok {
		r0 = rf(ingress)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Ingress) error); ok {
		r1 = rf(ingress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

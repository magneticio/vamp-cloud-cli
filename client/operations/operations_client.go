// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetApplications(params *GetApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsOK, error)

	GetApplicationsID(params *GetApplicationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDOK, error)

	GetApplicationsIDIngresses(params *GetApplicationsIDIngressesParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDIngressesOK, error)

	GetApplicationsIDInstallation(params *GetApplicationsIDInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDInstallationOK, error)

	GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersOK, error)

	GetServices(params *GetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesOK, error)

	PatchApplicationsApplicationIDIngressesIngressID(params *PatchApplicationsApplicationIDIngressesIngressIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchApplicationsApplicationIDIngressesIngressIDOK, error)

	PostApplications(params *PostApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplicationsOK, error)

	PostApplicationsIDIngresses(params *PostApplicationsIDIngressesParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplicationsIDIngressesOK, error)

	PostClusters(params *PostClustersParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersOK, error)

	PutApplicationsApplicationIDServicesServiceID(params *PutApplicationsApplicationIDServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutApplicationsApplicationIDServicesServiceIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetApplications returns list of all applications that can be accessed with provided api key
*/
func (a *Client) GetApplications(params *GetApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplications",
		Method:             "GET",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationsID returns application by ID
*/
func (a *Client) GetApplicationsID(params *GetApplicationsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplicationsID",
		Method:             "GET",
		PathPattern:        "/applications/{id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationsIDIngresses returns list of ingresses for an application
*/
func (a *Client) GetApplicationsIDIngresses(params *GetApplicationsIDIngressesParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsIDIngressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplicationsIDIngresses",
		Method:             "GET",
		PathPattern:        "/applications/{id}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsIDIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsIDIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsIDIngressesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetApplicationsIDInstallation returns list of ingresses for an application
*/
func (a *Client) GetApplicationsIDInstallation(params *GetApplicationsIDInstallationParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationsIDInstallationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsIDInstallationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplicationsIDInstallation",
		Method:             "GET",
		PathPattern:        "/applications/{id}/installation",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsIDInstallationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsIDInstallationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplicationsIDInstallationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClusters returns list of accessible clusters for provided api key
*/
func (a *Client) GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClusters",
		Method:             "GET",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServices returns list of accessible services for provided api key
*/
func (a *Client) GetServices(params *GetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServices",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchApplicationsApplicationIDIngressesIngressID updates ingress for an application
*/
func (a *Client) PatchApplicationsApplicationIDIngressesIngressID(params *PatchApplicationsApplicationIDIngressesIngressIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchApplicationsApplicationIDIngressesIngressIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApplicationsApplicationIDIngressesIngressIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchApplicationsApplicationIDIngressesIngressID",
		Method:             "PATCH",
		PathPattern:        "/applications/{applicationID}/ingresses/{ingressID}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.vamp.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchApplicationsApplicationIDIngressesIngressIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApplicationsApplicationIDIngressesIngressIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchApplicationsApplicationIDIngressesIngressIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplications creates a new application
*/
func (a *Client) PostApplications(params *PostApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplications",
		Method:             "POST",
		PathPattern:        "/applications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostApplicationsIDIngresses creates a new ingress
*/
func (a *Client) PostApplicationsIDIngresses(params *PostApplicationsIDIngressesParams, authInfo runtime.ClientAuthInfoWriter) (*PostApplicationsIDIngressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplicationsIDIngressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplicationsIDIngresses",
		Method:             "POST",
		PathPattern:        "/applications/{id}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostApplicationsIDIngressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplicationsIDIngressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplicationsIDIngressesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostClusters creates a new cluster
*/
func (a *Client) PostClusters(params *PostClustersParams, authInfo runtime.ClientAuthInfoWriter) (*PostClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClusters",
		Method:             "POST",
		PathPattern:        "/clusters",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutApplicationsApplicationIDServicesServiceID attaches service into application
*/
func (a *Client) PutApplicationsApplicationIDServicesServiceID(params *PutApplicationsApplicationIDServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutApplicationsApplicationIDServicesServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutApplicationsApplicationIDServicesServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutApplicationsApplicationIDServicesServiceID",
		Method:             "PUT",
		PathPattern:        "/applications/{applicationID}/services/{serviceID}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.vamp.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutApplicationsApplicationIDServicesServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutApplicationsApplicationIDServicesServiceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutApplicationsApplicationIDServicesServiceIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

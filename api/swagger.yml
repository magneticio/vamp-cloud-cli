swagger: "2.0"
info:
  description: Public API for Vamp Cloud
  title: Anansi
  version: 1.0.0
schemes:
  - http
consumes:
  - application/vnd.vamp.v1+json
produces:
  - application/vnd.vamp.v1+json
  - application/json
securityDefinitions:
  VampTokenHeader:
    type: apiKey
    in: header
    name: X-Vamp-Token
security:
  - VampTokenHeader: []
paths:
  /applications:
    get:
      summary: Returns list of all applications that can be accessed with provided api key.
      responses:
        200:
          description: List of application objects
          schema:
            $ref: "#/definitions/Applications"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
    post:
      summary: Create a new application
      consumes:
        - application/json
      parameters:
        - in: body
          name: application
          description: The application to create
          schema:
            $ref: "#/definitions/ApplicationInput"
      responses:
        200:
          description: ID of created application
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                description: The application ID
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /applications/{id}:
    get:
      summary: Returns application by ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: An application object.
          schema:
            $ref: "#/definitions/Application"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /applications/{id}/ingresses:
    get:
      summary: Returns list of ingresses for an application
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: List of ingress objects
          schema:
            $ref: "#/definitions/Ingresses"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
    post:
      summary: Create a new ingress
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
        - name: ingress
          in: body
          description: The application to create
          schema:
            $ref: "#/definitions/Ingress"
      responses:
        200:
          description: ID of created ingress
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                description: The ingress ID
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        409:
          $ref: "#/responses/Conflict"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /applications/{applicationID}/ingresses/{ingressID}:
    patch:
      summary: Update ingress for an application
      parameters:
        - name: applicationID
          description: application ID
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
        - name: ingressID
          description: ingress ID
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
        - name: ingress
          in: body
          description: The application to create
          schema:
            $ref: "#/definitions/Ingress"
      responses:
        200:
          description: OK
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /applications/{id}/installation:
    get:
      summary: Returns list of ingresses for an application
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: Installation command
          schema:
            $ref: "#/definitions/Installation"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /applications/{applicationID}/services/{serviceID}:
    put:
      summary: Attach service into application
      consumes:
        - application/json
      parameters:
        - name: applicationID
          in: path
          description: application ID
          required: true
          type: integer
          format: int64
          minimum: 1
        - name: serviceID
          in: path
          description: application ID
          required: true
          type: integer
          format: int64
          minimum: 1
        - name: PolicySelectionStrategyInput
          in: body
          description: Policy selection strategy for service
          schema:
            $ref: "#/definitions/PolicySelectionStrategyInput"
      responses:
        200:
          description: OK
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        409:
          $ref: "#/responses/Conflict"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /clusters:
    get:
      summary: Returns list of accessible clusters for provided api key
      responses:
        200:
          description: List of cluster objects
          schema:
            $ref: "#/definitions/Clusters"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
    post:
      summary: Create a new cluster
      consumes:
        - application/json
      parameters:
        - in: body
          name: cluster
          description: The cluster to create
          schema:
            $ref: "#/definitions/ClusterInput"
      responses:
        200:
          description: ID of created cluster
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                description: The cluster ID
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /services:
    get:
      summary: Returns list of accessible services for provided api key
      responses:
        200:
          description: List of service objects
          schema:
            $ref: "#/definitions/Services"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /releases:
    get:
      summary: Returns list of release IDs
      parameters:
        - name: applicationID
          in: query
          description: application ID
          type: integer
          format: int64
        - name: serviceID
          in: query
          description: service ID
          type: integer
          format: int64
        - name: count
          in: query
          description: desirable number of items in response
          type: integer
          format: int64
      responses:
        200:
          description: List of release IDs
          schema:
            $ref: "#/definitions/Releases"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /releases/{id}:
    get:
      summary: Get release status
      parameters:
        - name: id
          in: path
          required: true
          type: string
          minLength: 1
      responses:
        200:
          description: Release status object
          schema:
            $ref: "#/definitions/Release"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /policies:
    get:
      summary: Returns list of policies
      responses:
        200:
          description: List of policy objects
          schema:
            $ref: "#/definitions/Policies"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
  /service-versions/{id}:
    get:
      summary: Returns service version by ID.
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: A service version object.
          schema:
            $ref: "#/definitions/ServiceVersion"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
        default:
          $ref: "#/responses/GenericError"
definitions:
  Applications:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Application"
  Application:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
        minLength: 1
      namespace:
        type: string
        minLength: 1
      metadata:
        type: array
        items:
          $ref: "#/definitions/Metadata"
      isOwner:
        type: boolean
      clusterID:
        type: integer
        format: int64
  ApplicationInput:
    type: object
    properties:
      name:
        type: string
        minLength: 1
      description:
        type: string
      clusterID:
        type: integer
        format: int64
      ingressType:
        type: string
        enum: [NGINX, CONTOUR]
      namespace:
        type: string
        minLength: 1
  Metadata:
    type: object
    properties:
      key:
        type: string
        minLength: 1
      value:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        minLength: 1
  Clusters:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Cluster"
  Cluster:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
      description:
        type: string
      provider:
        type: string
        enum: [AKS, DOKS, EKS, GKE, SELF_MANAGED, OTHER]
      isOwner:
        type: boolean
  ClusterInput:
    type: object
    properties:
      name:
        type: string
        minLength: 1
      description:
        type: string
      provider:
        type: string
        enum: [AKS, DOKS, EKS, GKE, SELF_MANAGED, OTHER]
  Services:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Service"
  Service:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
      projectID:
        type: integer
        format: int64
        readOnly: true
  Ingresses:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Ingress"
  Ingress:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      domainName:
        type: string
        minLength: 1
      tlsType:
        type: string
        enum: [NO_TLS, TLS_EDGE]
      tlsSecretName:
        type: string
      routes:
        type: array
        items:
          $ref: "#/definitions/Route"
  Route:
    type: object
    properties:
      path:
        type: string
      serviceID:
        type: integer
        format: int64
  Installation:
    type: object
    properties:
      command:
        type: string
  PolicySelectionStrategyInput:
    type: object
    properties:
      defaultPolicyID:
        type: integer
        format: int64
      majorPolicyID:
        type: integer
        format: int64
      minorPolicyID:
        type: integer
        format: int64
      patchPolicyID:
        type: integer
        format: int64
  Releases:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Release"
  Release:
    type: object
    properties:
      id:
        type: string
        minLength: 1
      applicationID:
        type: integer
        format: int64
        readOnly: true
      sourceVersionID:
        type: integer
        format: int64
      targetVersionID:
        type: integer
        format: int64
      policyID:
        type: integer
        format: int64
      state:
        type: string
        enum: [PENDING, RUNNING, FINISHED, FAILED]
      currentHealth: 
        type: number
        format: double
      targetHealth: 
        type: number
        format: double  
      currentStep:
        type: integer
        format: int64
      releasePage:
        type: string
  Policies:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Policy"
  Policy:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
      type:
        type: string
        enum: [VALIDATION, TRAFFIC_SHAPING_BASIC, TRAFFIC_SHAPING_EXTENDED]
  ServiceVersion:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
      serviceID:
        type: integer
        format: int64
        readOnly: true
responses:
  Unauthorized:
    description: The requester is not authorized.
    schema:
      $ref: "#/definitions/Error"
  BadRequest:
    description: The request is invalid.
    schema:
      $ref: "#/definitions/Error"    
  Forbidden:
    description: The requester does not have access rights to the resource.
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: The server can not find the requested resource.
    schema:
      $ref: "#/definitions/Error"
  Conflict:
    description: The request cannot be completed due to a conflict with the current state of the resource.
    schema:
      $ref: "#/definitions/Error"
  InternalServerError:
    description: The server has encountered a situation it does not know how to handle.
    schema:
      $ref: "#/definitions/Error"
  GenericError:
    description: Generic error.
    schema:
      $ref: "#/definitions/Error"

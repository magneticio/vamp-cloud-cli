// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Policy policy
//
// swagger:model Policy
type Policy struct {

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// type
	// Enum: [VALIDATION TRAFFIC_SHAPING_BASIC TRAFFIC_SHAPING_EXTENDED]
	Type string `json:"type,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

var policyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALIDATION","TRAFFIC_SHAPING_BASIC","TRAFFIC_SHAPING_EXTENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeTypePropEnum = append(policyTypeTypePropEnum, v)
	}
}

const (

	// PolicyTypeVALIDATION captures enum value "VALIDATION"
	PolicyTypeVALIDATION string = "VALIDATION"

	// PolicyTypeTRAFFICSHAPINGBASIC captures enum value "TRAFFIC_SHAPING_BASIC"
	PolicyTypeTRAFFICSHAPINGBASIC string = "TRAFFIC_SHAPING_BASIC"

	// PolicyTypeTRAFFICSHAPINGEXTENDED captures enum value "TRAFFIC_SHAPING_EXTENDED"
	PolicyTypeTRAFFICSHAPINGEXTENDED string = "TRAFFIC_SHAPING_EXTENDED"
)

// prop value enum
func (m *Policy) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseStatus release status
//
// swagger:model ReleaseStatus
type ReleaseStatus struct {

	// current health
	CurrentHealth float64 `json:"currentHealth,omitempty"`

	// current step
	CurrentStep int64 `json:"currentStep,omitempty"`

	// state
	// Enum: [PENDING RUNNING FINISHED FAILED]
	State string `json:"state,omitempty"`
}

// Validate validates this release status
func (m *ReleaseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FINISHED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseStatusTypeStatePropEnum = append(releaseStatusTypeStatePropEnum, v)
	}
}

const (

	// ReleaseStatusStatePENDING captures enum value "PENDING"
	ReleaseStatusStatePENDING string = "PENDING"

	// ReleaseStatusStateRUNNING captures enum value "RUNNING"
	ReleaseStatusStateRUNNING string = "RUNNING"

	// ReleaseStatusStateFINISHED captures enum value "FINISHED"
	ReleaseStatusStateFINISHED string = "FINISHED"

	// ReleaseStatusStateFAILED captures enum value "FAILED"
	ReleaseStatusStateFAILED string = "FAILED"
)

// prop value enum
func (m *ReleaseStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseStatus) UnmarshalBinary(b []byte) error {
	var res ReleaseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Release release
//
// swagger:model Release
type Release struct {

	// application ID
	// Read Only: true
	ApplicationID int64 `json:"applicationID,omitempty"`

	// current health
	CurrentHealth float64 `json:"currentHealth,omitempty"`

	// current step
	CurrentStep int64 `json:"currentStep,omitempty"`

	// html url
	HTMLURL string `json:"html_url,omitempty"`

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// policy ID
	PolicyID int64 `json:"policyID,omitempty"`

	// source version ID
	SourceVersionID int64 `json:"sourceVersionID,omitempty"`

	// state
	// Enum: [PENDING RUNNING FINISHED FAILED]
	State string `json:"state,omitempty"`

	// target health
	TargetHealth float64 `json:"targetHealth,omitempty"`

	// target version ID
	TargetVersionID int64 `json:"targetVersionID,omitempty"`
}

// Validate validates this release
func (m *Release) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Release) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

var releaseTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","RUNNING","FINISHED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseTypeStatePropEnum = append(releaseTypeStatePropEnum, v)
	}
}

const (

	// ReleaseStatePENDING captures enum value "PENDING"
	ReleaseStatePENDING string = "PENDING"

	// ReleaseStateRUNNING captures enum value "RUNNING"
	ReleaseStateRUNNING string = "RUNNING"

	// ReleaseStateFINISHED captures enum value "FINISHED"
	ReleaseStateFINISHED string = "FINISHED"

	// ReleaseStateFAILED captures enum value "FAILED"
	ReleaseStateFAILED string = "FAILED"
)

// prop value enum
func (m *Release) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Release) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Release) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Release) UnmarshalBinary(b []byte) error {
	var res Release
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
